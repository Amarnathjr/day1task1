

/*

var:
. Function scoped
. Accessible throughout the function
. Can be re-declared and updated
. If declared outside any function, becomes a global variable

*/
function example() {
    if (true) {
        var a = 10;
    }
    console.log("var a:", a); // Works because var is function scoped
}
example();


/*

let:
. Block scoped
. Can be reassigned but not re-declared in the same block
*/
let a = 10;
a = 20;
console.log("let a:", a); // 20


/*

const:
. Block scoped
. Cannot be reassigned or re-declared
*/
const c = 10;
// c = 20; //Error: Assignment to constant variable
console.log("const c:", c);


/*

let and const are block-scoped:
. They are accessible only within the block they are declared in
*/
function example1() {
    if (true) {
        let a = 10;
        const b = 5;
        console.log("Inside block:", a, b); // 
    }
    // console.log(a, b); //  Error: a and b are not accessible here
}
example1();



//Primitive Data Types


let str = "amarnath";      // String
let number = 123;    // Number
let boolean = true;   // Boolean
let x;        // undefined
let y = null; // null
let big = 123n; // BigInt
let sym = Symbol("id"); // Symbol

console.log(str, number, boolean, x, y, big, sym);


//Non-Primitive Data Types
non primitive 
objects:
these are mutables which we can change we can add multiple values in a set.where we can store key value pairs.

*/
const person={
    name:"amar"
};
console.log(person);



/*
An array is a special variable that can hold multiple values in a single variable.

*/
const arr=["item1","item2","item3"];
console.log(arr);




/*
it is a block of code where we can perform our logic within that block
*/



function add(a,b){
    return a+b;
}
console.log(add(5,10));
